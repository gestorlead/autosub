#!/bin/bash
set -e

echo "üöÄ Iniciando o AutoSub..."

# Usando as vari√°veis de ambiente definidas no docker-compose ou .env
# N√£o precisamos definir PGPASSWORD aqui, pois deve vir do ambiente

# Fun√ß√£o para verificar se o banco de dados est√° acess√≠vel
function check_database() {
  echo "‚è≥ Aguardando conex√£o com o banco de dados..."
  
  # Tenta conectar ao banco de dados, com tempo limite de 60 segundos
  for i in {1..30}; do
    if pg_isready -h ${DB_HOST:-db} -U ${POSTGRES_USER:-postgres}; then
      echo "‚úÖ Conex√£o com o banco de dados estabelecida!"
      return 0
    fi
    echo "‚è≥ Tentativa $i/30. Tentando novamente em 2 segundos..."
    sleep 2
  done
  
  echo "‚ùå N√£o foi poss√≠vel conectar ao banco de dados. Tempo limite excedido."
  return 1
}

# Fun√ß√£o para criar o banco de dados se n√£o existir
function setup_database() {
  echo "üîß Verificando se o banco de dados '${DB_NAME:-autosub}' existe..."
  
  # Usando vari√°veis de ambiente
  if ! PGPASSWORD="${POSTGRES_PASSWORD}" psql -h ${DB_HOST:-db} -U ${POSTGRES_USER:-postgres} -lqt | cut -d \| -f 1 | grep -qw ${DB_NAME:-autosub}; then
    echo "üì¶ Criando banco de dados '${DB_NAME:-autosub}'..."
    PGPASSWORD="${POSTGRES_PASSWORD}" psql -h ${DB_HOST:-db} -U ${POSTGRES_USER:-postgres} -c "CREATE DATABASE ${DB_NAME:-autosub};"
    echo "‚úÖ Banco de dados '${DB_NAME:-autosub}' criado com sucesso!"
  else
    echo "‚úÖ Banco de dados '${DB_NAME:-autosub}' j√° existe!"
  fi
}

# Verifica se o banco de dados est√° acess√≠vel
check_database

# Setup do banco de dados
setup_database

# Executando migra√ß√µes
echo "üîÑ Executando migra√ß√µes do banco de dados..."
python -m src.migrations.migrations

# Iniciando a aplica√ß√£o
echo "üåü Iniciando o servidor Gunicorn..."
exec gunicorn app:app --bind 0.0.0.0:5000 --timeout 300 --workers 2 